{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const getTodosAsync = createAsyncThunk('todos/getTodosAsync', async () => {\n  const res = await fetch('http://localhost:7000/todos');\n\n  if (res.ok) {\n    const todos = await res.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk('todos/addTodoAsync', async payload => {\n  const res = await fetch('http://localhost:7000/todos', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: payload.title\n    })\n  });\n\n  if (res.ok) {\n    const todo = await res.json();\n    return {\n      todo\n    };\n  }\n});\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: [{\n    id: 1,\n    title: 'todo 1',\n    completed: false\n  }, {\n    id: 2,\n    title: 'todo 2',\n    completed: false\n  }, {\n    id: 3,\n    title: 'todo 3',\n    completed: true\n  }],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.fulfilled]: (state, action) => {\n      return action.payload.todos;\n    }\n  }\n}); // export actions\n\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions; // export reducer\n\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/bojanj/Desktop/todo-redux-toolkit/client/src/components/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","res","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","title","todo","todoSlice","name","initialState","id","completed","reducers","addTodo","state","action","newTodo","Date","now","push","toggleComplete","index","findIndex","deleteTodo","filter","extraReducers","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const getTodosAsync = createAsyncThunk(\n\t'todos/getTodosAsync',\n\tasync () => {\n\t\tconst res = await fetch('http://localhost:7000/todos');\n\t\tif (res.ok) {\n\t\t\tconst todos = await res.json();\n\t\t\treturn { todos };\n\t\t}\n\t}\n);\n\nexport const addTodoAsync = createAsyncThunk(\n\t'todos/addTodoAsync',\n\tasync (payload) => {\n\t\tconst res = await fetch('http://localhost:7000/todos', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify({ title: payload.title })\n\t\t});\n\t\tif (res.ok) {\n\t\t\tconst todo = await res.json();\n\t\t\treturn { todo };\n\t\t}\n\t}\n);\n\nconst todoSlice = createSlice({\n\tname: 'todos',\n\tinitialState: [\n\t\t{ id: 1, title: 'todo 1', completed: false },\n\t\t{ id: 2, title: 'todo 2', completed: false },\n\t\t{ id: 3, title: 'todo 3', completed: true }\n\t],\n\treducers: {\n\t\taddTodo: (state, action) => {\n\t\t\tconst newTodo = {\n\t\t\t\tid: Date.now(),\n\t\t\t\ttitle: action.payload.title,\n\t\t\t\tcompleted: false\n\t\t\t};\n\t\t\tstate.push(newTodo);\n\t\t},\n\t\ttoggleComplete: (state, action) => {\n\t\t\tconst index = state.findIndex((todo) => todo.id === action.payload.id);\n\t\t\tstate[index].completed = action.payload.completed;\n\t\t},\n\t\tdeleteTodo: (state, action) => {\n\t\t\treturn state.filter((todo) => todo.id !== action.payload.id);\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getTodosAsync.fulfilled]: (state, action) => {\n\t\t\treturn action.payload.todos;\n\t\t}\n\t}\n});\n\n// export actions\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n// export reducer\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}